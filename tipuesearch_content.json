{"pages":[{"title":"Area Plot","text":"This code uses D3 and Dimple.js . <!-- Create an element for our chart --> < div id = \"chart\" style = \"height: 400px; width: 100%;\" ></ div > <!-- Load D3 --> < script src = \"https://d3js.org/d3.v4.min.js\" ></ script > <!-- Load Dimple --> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/dimple/2.3.0/dimple.latest.min.js\" ></ script > <!-- Create a dimble chart --> < script type = \"text/javascript\" > // Create a new svg variable var svg = dimple . newSvg ( \"#chart\" , \"100%\" , \"100%\" ); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3 . tsv ( url , function ( data ) { // Filter the data so we only see data where Owner = Aperture or Black Mesa data = dimple . filterData ( data , \"Owner\" , [ \"Aperture\" , \"Black Mesa\" ]) // Create a chart var myChart = new dimple . chart ( svg , data ); // Add an x-axis of time, grouped by Month var x = myChart . addCategoryAxis ( \"x\" , \"Month\" ); // Order the x-axis by date x . addOrderRule ( \"Date\" ); // Add a y-axis myChart . addMeasureAxis ( \"y\" , \"Unit Sales\" ); // Add the actual data var s = myChart . addSeries ( null , dimple . plot . area ); // Add some margins myChart . setMargins ( \"10%\" , \"10%\" , \"10%\" , \"20%\" ); // Draw the chart myChart . draw (); }); </ script > // Create a new svg variable var svg = dimple.newSvg(\"#chart\", \"100%\", \"100%\"); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3.tsv(url, function(data) { // Filter the data so we only see data where Owner = Aperture or Black Mesa data = dimple.filterData(data, \"Owner\", [\"Aperture\", \"Black Mesa\"]) // Create a chart var myChart = new dimple.chart(svg, data); // Add an x-axis of time, grouped by Month var x = myChart.addCategoryAxis(\"x\", \"Month\"); // Order the x-axis by date x.addOrderRule(\"Date\"); // Add a y-axis myChart.addMeasureAxis(\"y\", \"Unit Sales\"); // Add the actual data var s = myChart.addSeries(null, dimple.plot.area); // Add some margins myChart.setMargins(\"10%\", \"10%\", \"10%\", \"20%\"); // Draw the chart myChart.draw(); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/area-plot.html","loc":"http://chrisalbon.com/javascript/area-plot.html"},{"title":"Bar Chart","text":"This code uses D3 and Dimple.js . <!-- Create an element for our chart --> < div id = \"chart\" style = \"height: 400px; width: 100%;\" ></ div > <!-- Load D3 --> < script src = \"https://d3js.org/d3.v4.min.js\" ></ script > <!-- Load Dimple --> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/dimple/2.3.0/dimple.latest.min.js\" ></ script > <!-- Create a dimble chart --> < script type = \"text/javascript\" > // Create a new svg variable var svg = dimple . newSvg ( \"#chart\" , \"100%\" , \"100%\" ); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3 . tsv ( url , function ( data ) { // Create a new chart var myChart = new dimple . chart ( svg , data ); // Add an x-axis that groups the data by month var x = myChart . addCategoryAxis ( \"x\" , \"Month\" ); // Order the x axis by date x . addOrderRule ( \"Date\" ); // Add a y-axis for the variable \"Unit Sales\" myChart . addMeasureAxis ( \"y\" , \"Unit Sales\" ); // Add the data to the chart var avg = myChart . addSeries ( null , dimple . plot . bar ); // Calculate the average Unit Sales avg . aggregate = dimple . aggregateMethod . avg ; // Add some margins myChart . setMargins ( \"10%\" , \"10%\" , \"10%\" , \"20%\" ); // Draw the chart myChart . draw (); }); </ script > // Create a new svg variable var svg = dimple.newSvg(\"#chart\", \"100%\", \"100%\"); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3.tsv(url, function(data) { // Create a new chart var myChart = new dimple.chart(svg, data); // Add an x-axis that groups the data by month var x = myChart.addCategoryAxis(\"x\", \"Month\"); // Order the x axis by date x.addOrderRule(\"Date\"); // Add a y-axis for the variable \"Unit Sales\" myChart.addMeasureAxis(\"y\", \"Unit Sales\"); // Add the data to the chart var avg = myChart.addSeries(null, dimple.plot.bar); // Calculate the average Unit Sales avg.aggregate = dimple.aggregateMethod.avg; // Add some margins myChart.setMargins(\"10%\", \"10%\", \"10%\", \"20%\"); // Draw the chart myChart.draw(); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/bar-chart.html","loc":"http://chrisalbon.com/javascript/bar-chart.html"},{"title":"Basic Mathematics","text":"< script > // Create an array of numbers var ages = [ 22 , 43 , 24 , 48 , 35 , 34 , 20 ]; // Print to log console . log ( 'ages: ' , ages ); // Get the length of the ages array var numberOfEmployes = ages . length ; // Print to log console . log ( 'numberOfEmployes: ' , numberOfEmployes ); // Square root var squareRoot = Math . sqrt ( numberOfEmployes ); // Print to log console . log ( 'squareRoot: ' , squareRoot ); // Absolute Value var absoluteValue = Math . abs ( - 4.7 ); // Print to log console . log ( 'absoluteValue: ' , absoluteValue ); // Minimum value of an array var min = Math . min . apply ( null , ages ); // Print to log console . log ( 'min: ' , min ); // Maximum value of an array var max = Math . max . apply ( null , ages ); // Print to log console . log ( 'max: ' , max ); // Log var log = Math . log ( numberOfEmployes ); // Print to log console . log ( 'log: ' , log ); // Exponent var exponent = Math . exp ( numberOfEmployes ); // Print to log console . log ( 'exponent: ' , exponent ); </ script > // Create an array of numbers var ages = [22,43,24,48,35,34,20]; // Print to log console.log('ages: ', ages); // Get the length of the ages array var numberOfEmployes = ages.length; // Print to log console.log('numberOfEmployes: ', numberOfEmployes); // Square root var squareRoot = Math.sqrt(numberOfEmployes); // Print to log console.log('squareRoot: ', squareRoot); // Absolute Value var absoluteValue = Math.abs(-4.7); // Print to log console.log('absoluteValue: ', absoluteValue); // Minimum value of an array var min = Math.min.apply(null, ages); // Print to log console.log('min: ', min); // Maximum value of an array var max = Math.max.apply(null, ages); // Print to log console.log('max: ', max); // Log var log = Math.log(numberOfEmployes); // Print to log console.log('log: ', log); // Exponent var exponent = Math.exp(numberOfEmployes); // Print to log console.log('exponent: ', exponent);","tags":"Javascript","url":"http://chrisalbon.com/javascript/basic-mathematics.html","loc":"http://chrisalbon.com/javascript/basic-mathematics.html"},{"title":"Bubble Plot","text":"This code uses D3 and Dimple.js . <!-- Create an element for our chart --> < div id = \"chart\" style = \"height: 400px; width: 100%;\" ></ div > <!-- Load D3 --> < script src = \"https://d3js.org/d3.v4.min.js\" ></ script > <!-- Load Dimple --> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/dimple/2.3.0/dimple.latest.min.js\" ></ script > <!-- Create a dimble chart --> < script type = \"text/javascript\" > // Create a new svg variable var svg = dimple . newSvg ( \"#chart\" , \"100%\" , \"100%\" ); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3 . tsv ( url , function ( data ) { // Create a new chart var myChart = new dimple . chart ( svg , data ); // Add a x-axis myChart . addMeasureAxis ( \"x\" , \"Price Monthly Change\" ); // Add a y-axis myChart . addMeasureAxis ( \"y\" , \"Operating Profit\" ); // Add a z-axis (which will determine marker size) myChart . addMeasureAxis ( \"z\" , \"Unit Sales\" ); // Add the data to the chart, grouped by SKU and Channel var avg = myChart . addSeries ([ \"SKU\" , \"Channel\" ], dimple . plot . bubble ); // Add a legend myChart . addLegend ( 5 , 5 , 360 , 20 , \"right\" ); // Add some margins myChart . setMargins ( \"10%\" , \"10%\" , \"10%\" , \"20%\" ); // Draw the chart myChart . draw (); }); </ script > // Create a new svg variable var svg = dimple.newSvg(\"#chart\", \"100%\", \"100%\"); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3.tsv(url, function(data) { // Create a new chart var myChart = new dimple.chart(svg, data); // Add a x-axis myChart.addMeasureAxis(\"x\", \"Price Monthly Change\"); // Add a y-axis myChart.addMeasureAxis(\"y\", \"Operating Profit\"); // Add a z-axis (which will determine marker size) myChart.addMeasureAxis(\"z\", \"Unit Sales\"); // Add the data to the chart, grouped by SKU and Channel var avg = myChart.addSeries([\"SKU\", \"Channel\"], dimple.plot.bubble); // Add a legend myChart.addLegend(5, 5, 360, 20, \"right\"); // Add some margins myChart.setMargins(\"10%\", \"10%\", \"10%\", \"20%\"); // Draw the chart myChart.draw(); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/bubble-plot.html","loc":"http://chrisalbon.com/javascript/bubble-plot.html"},{"title":"Convert Strings To Numbers","text":"<!-- Load D3 Library --> < script src = \"http://d3js.org/d3.v3.min.js\" charset = \"utf-8\" ></ script > <!-- Use D3 Library --> < script > // Create a variable with the url to the data var url = \"https://gist.githubusercontent.com/d3byex/e5ce6526ba2208014379/raw/8fefb14cc18f0440dc00248f23cbf6aec80dcc13/walking_dead_s5.csv\" ; // Load a CSV file d3 . csv ( url , function ( error , data ) { // Create a variable, map to each row/element in the data a function var mappedAndConverted = data . map ( function ( d ) { // Return return { // Convert episode to numeric and add Episode : + d . Episode , // Convert USViewers to numeric and add USViewers : + d . USViewers , // Add title Title : d . Title }; }); // Output to console console . log ( mappedAndConverted ); }); </ script > // Create a variable with the url to the data var url = \"https://gist.githubusercontent.com/d3byex/e5ce6526ba2208014379/raw/8fefb14cc18f0440dc00248f23cbf6aec80dcc13/walking_dead_s5.csv\"; // Load a CSV file d3.csv(url, function(error, data) { // Create a variable, map to each row/element in the data a function var mappedAndConverted = data.map(function(d) { // Return return { // Convert episode to numeric and add Episode: +d.Episode, // Convert USViewers to numeric and add USViewers: +d.USViewers, // Add title Title: d.Title }; }); // Output to console console.log(mappedAndConverted); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/convert-strings-to-numbers.html","loc":"http://chrisalbon.com/javascript/convert-strings-to-numbers.html"},{"title":"Dates And Times","text":"< script > // Create current date and time var current = new Date (); // Output to log console . log ( 'current:' , current ); // Specific date: Year, month (zero based!), day, hour, minute, second, and millisecond var birthday = new Date ( 1983 , 08 , 15 , 11 , 33 , 30 , 0 ); // Output to log console . log ( 'birthday:' , birthday ); // Date in string format var stringDate = new Date ( \"2015-11-21\" ); // Output to log, printing only the year, month, day, and day of the week console . log ( 'stringDate:' , stringDate . toDateString ()); </ script > // Create current date and time var current = new Date(); // Output to log console.log('current:', current); // Specific date: Year, month (zero based!), day, hour, minute, second, and millisecond var birthday = new Date(1983, 08, 15, 11, 33, 30, 0); // Output to log console.log('birthday:', birthday); // Date in string format var stringDate = new Date(\"2015-11-21\"); // Output to log, printing only the year, month, day, and day of the week console.log('stringDate:', stringDate.toDateString());","tags":"Javascript","url":"http://chrisalbon.com/javascript/dates-and-times.html","loc":"http://chrisalbon.com/javascript/dates-and-times.html"},{"title":"Displaying Outputs","text":"< p id = \"output\" ></ p > < script > // In the html document, select the element with the ID of 'output' and add 5+6 inside of the element document . getElementById ( \"output\" ). innerHTML = 5 + 6 ; // Output 5 + 6 to the console console . log ( 2 + 3 ); </ script > // In the html document, select the element with the ID of 'output' and add 5+6 inside of the element document.getElementById(\"output\").innerHTML = 5 + 6; // Output 5 + 6 to the console console.log(2 + 3);","tags":"Javascript","url":"http://chrisalbon.com/javascript/displaying-outputs.html","loc":"http://chrisalbon.com/javascript/displaying-outputs.html"},{"title":"For Loops And While Loops","text":"< script > // Create an array of employee names var employees = [ \"Steve Miller\" , \"Mark Jacob\" , \"Sam Stein\" , \"Judith Lack\" , \"Ado Stone\" , \"Bob Bill\" ]; // Create an empty array var upperCaseEmployees = []; // Create a variable for index var i ; // Start by setting i = 0 // If i is less than length of employees, run loop // After each loop add 1 to i for ( i = 0 ; i < employees . length ; i ++ ) { // Add uppercase versions of employee names upperCaseEmployees [ i ] = employees [ i ]. toUpperCase (); } // Output to log console . log ( \"upperCaseEmployees:\" , upperCaseEmployees ) // Create an empty array var lowerCaseEmployees = []; // Create a variable for index var j ; // For each element in the array for ( j in employees ) { // Change case and add to lowerCaseEmployees array lowerCaseEmployees [ j ] = employees [ j ]. toLowerCase (); } // Output to log console . log ( \"lowerCaseEmployees:\" , lowerCaseEmployees ) // Create an empty array var twoLowerCaseEmployees = []; // Create a variable for index var k = 0 ; // While k is less than 2 while ( k < 2 ) { // Change case and add to array twoLowerCaseEmployees [ k ] = employees [ k ]. toLowerCase (); // And add 1 to k k ++ ; } // Output to log console . log ( \"twoLowerCaseEmployees:\" , twoLowerCaseEmployees ) </ script > // Create an array of employee names var employees = [\"Steve Miller\", \"Mark Jacob\", \"Sam Stein\", \"Judith Lack\", \"Ado Stone\", \"Bob Bill\"]; // Create an empty array var upperCaseEmployees = []; // Create a variable for index var i; // Start by setting i = 0 // If i is less than length of employees, run loop // After each loop add 1 to i for (i = 0; i < employees.length; i++) { // Add uppercase versions of employee names upperCaseEmployees[i] = employees[i].toUpperCase(); } // Output to log console.log(\"upperCaseEmployees:\", upperCaseEmployees) // Create an empty array var lowerCaseEmployees = []; // Create a variable for index var j; // For each element in the array for (j in employees) { // Change case and add to lowerCaseEmployees array lowerCaseEmployees[j] = employees[j].toLowerCase(); } // Output to log console.log(\"lowerCaseEmployees:\", lowerCaseEmployees) // Create an empty array var twoLowerCaseEmployees = []; // Create a variable for index var k = 0; // While k is less than 2 while (k < 2) { // Change case and add to array twoLowerCaseEmployees[k] = employees[k].toLowerCase(); // And add 1 to k k++; } // Output to log console.log(\"twoLowerCaseEmployees:\", twoLowerCaseEmployees)","tags":"Javascript","url":"http://chrisalbon.com/javascript/for-loops-and-while-loops.html","loc":"http://chrisalbon.com/javascript/for-loops-and-while-loops.html"},{"title":"Functions","text":"< p id = \"demo\" ></ p > < script > // Create a function with two parameters, x and y function multiply ( x , y ) { // Return x multipled to y return x * y ; } // Call the function and insert the output inside the HTML element with ID=\"demo\" document . getElementById ( \"demo\" ). innerHTML = multiply ( 4 , 3 ); </ script > // Create a function with two parameters, x and y function multiply(x, y) { // Return x multipled to y return x * y; } // Call the function and insert the output inside the HTML element with ID=\"demo\" document.getElementById(\"demo\").innerHTML = multiply(4, 3);","tags":"Javascript","url":"http://chrisalbon.com/javascript/functions.html","loc":"http://chrisalbon.com/javascript/functions.html"},{"title":"Generate Random Numbers","text":"< script > // Create a function that takes a max and min function randomInteger ( min , max ) { // Returns the integer of a random number scaled by max and min, inclusively return Math . floor ( Math . random () * ( max - min + 1 )) + min ; }; // Print to console console . log ( 'randomInteger:' , randomInteger ( 0 , 100 )); // Create a function that takes a max and min function randomfloat ( min , max ) { // Returns the float of a random number scaled by max and min, exclusively return Math . random () * ( max - min ) + min ; }; // Print to console console . log ( 'randomfloat:' , randomfloat ( - 1 , 1 )); </ script > // Create a function that takes a max and min function randomInteger(min, max) { // Returns the integer of a random number scaled by max and min, inclusively return Math.floor(Math.random() * (max - min + 1)) + min; }; // Print to console console.log('randomInteger:', randomInteger(0,100)); // Create a function that takes a max and min function randomfloat(min, max) { // Returns the float of a random number scaled by max and min, exclusively return Math.random() * (max - min) + min; }; // Print to console console.log('randomfloat:', randomfloat(-1,1));","tags":"Javascript","url":"http://chrisalbon.com/javascript/generate-random-numbers.html","loc":"http://chrisalbon.com/javascript/generate-random-numbers.html"},{"title":"Grouped Bar Chart","text":"This code uses D3 and Dimple.js . <!-- Create an element for our chart --> < div id = \"chart\" style = \"height: 400px; width: 100%;\" ></ div > <!-- Load D3 --> < script src = \"https://d3js.org/d3.v4.min.js\" ></ script > <!-- Load Dimple --> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/dimple/2.3.0/dimple.latest.min.js\" ></ script > <!-- Create a dimble chart --> < script type = \"text/javascript\" > // Create a new svg variable var svg = dimple . newSvg ( \"#chart\" , \"100%\" , \"100%\" ); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3 . tsv ( url , function ( data ) { // Create a new chart var myChart = new dimple . chart ( svg , data ); // Add an x-axis that groups the data by two categorical variables myChart . addCategoryAxis ( \"x\" , [ \"Price Tier\" , \"Channel\" ]); // Add a y-axis that is the percent of unit sales. myChart . addMeasureAxis ( \"y\" , \"Unit Sales\" ); // Add the data to the chart, grouped by \"Channel\" var avg = myChart . addSeries ( \"Channel\" , dimple . plot . bar ); // Calculate the average Unit Sales avg . aggregate = dimple . aggregateMethod . avg ; // Add some margins myChart . setMargins ( \"10%\" , \"10%\" , \"10%\" , \"20%\" ); // Add a legend 50% from the left, 5% from the top, 510 width and 20 height, with inside text aligned right myChart . addLegend ( \"50%\" , \"5%\" , 510 , 20 , \"right\" ); // Draw the chart myChart . draw (); }); </ script > // Create a new svg variable var svg = dimple.newSvg(\"#chart\", \"100%\", \"100%\"); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3.tsv(url, function(data) { // Create a new chart var myChart = new dimple.chart(svg, data); // Add an x-axis that groups the data by two categorical variables myChart.addCategoryAxis(\"x\", [\"Price Tier\", \"Channel\"]); // Add a y-axis that is the percent of unit sales. myChart.addMeasureAxis(\"y\", \"Unit Sales\"); // Add the data to the chart, grouped by \"Channel\" var avg = myChart.addSeries(\"Channel\", dimple.plot.bar); // Calculate the average Unit Sales avg.aggregate = dimple.aggregateMethod.avg; // Add some margins myChart.setMargins(\"10%\", \"10%\", \"10%\", \"20%\"); // Add a legend 50% from the left, 5% from the top, 510 width and 20 height, with inside text aligned right myChart.addLegend(\"50%\", \"5%\", 510, 20, \"right\"); // Draw the chart myChart.draw(); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/grouped-bar-chart.html","loc":"http://chrisalbon.com/javascript/grouped-bar-chart.html"},{"title":"If... Else","text":"< script > // Create a function that takes a max and min function randomInteger ( min , max ) { // Returns the integer of a random number scaled by max and min, inclusively return Math . floor ( Math . random () * ( max - min + 1 )) + min ; }; // Create a random integer between 1 and 100 var price = randomInteger ( 1 , 100 ) // If price is less than two if ( price < 2 ) { // Set output variable output = \"Less than 2\" ; // Else, if price is between 2 and 10 } else if ( price > 2 && price < 10 ) { // Set output variable output = \"Between 2 and 10\" ; // Else, if price is exactly 16 } else if ( price == 16 ) { // Set output variable output = \"Exactly 16\" ; // Else, if price is either 30 or 31 } else if ( price == 30 || price == 31 ) { // Set output variable output = \"30 or 31\" ; // Else, if price is less than or equal to 20 } else if ( price <= 20 ) { // Set output variable output = \"Less than or equal to 20\" ; // Else if price is not equal to 21 } else if ( price != 21 ) { // Set output variable output = \"Not equal to 21\" ; // Otherwise } else { // Set output variable output = \"Some other number\" ; } // Output to console console . log ( output + ':' , price ) </ script > // Create a function that takes a max and min function randomInteger(min, max) { // Returns the integer of a random number scaled by max and min, inclusively return Math.floor(Math.random() * (max - min + 1)) + min; }; // Create a random integer between 1 and 100 var price = randomInteger(1, 100) // If price is less than two if (price < 2) { // Set output variable output = \"Less than 2\"; // Else, if price is between 2 and 10 } else if (price > 2 && price < 10) { // Set output variable output = \"Between 2 and 10\"; // Else, if price is exactly 16 } else if (price == 16) { // Set output variable output = \"Exactly 16\"; // Else, if price is either 30 or 31 } else if (price == 30 || price == 31) { // Set output variable output = \"30 or 31\"; // Else, if price is less than or equal to 20 } else if (price <= 20) { // Set output variable output = \"Less than or equal to 20\"; // Else if price is not equal to 21 } else if (price != 21) { // Set output variable output = \"Not equal to 21\"; // Otherwise } else { // Set output variable output = \"Some other number\"; } // Output to console console.log(output + ':', price)","tags":"Javascript","url":"http://chrisalbon.com/javascript/if-else.html","loc":"http://chrisalbon.com/javascript/if-else.html"},{"title":"Load A CSV File","text":"<!-- Load D3 Library --> < script src = \"http://d3js.org/d3.v3.min.js\" charset = \"utf-8\" ></ script > <!-- Use D3 Library --> < script > // Create a variable with the url to the csv file var url = \"https://gist.githubusercontent.com/d3byex/e5ce6526ba2208014379/raw/8fefb14cc18f0440dc00248f23cbf6aec80dcc13/walking_dead_s5.csv\" ; // Load the csv file d3 . csv ( url , function ( error , data ) { // Output the first observation to the log console . log ( data [ 0 ]); }); </ script > // Create a variable with the url to the csv file var url = \"https://gist.githubusercontent.com/d3byex/e5ce6526ba2208014379/raw/8fefb14cc18f0440dc00248f23cbf6aec80dcc13/walking_dead_s5.csv\"; // Load the csv file d3.csv(url, function (error, data) { // Output the first observation to the log console.log(data[0]); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/load-a-csv-file.html","loc":"http://chrisalbon.com/javascript/load-a-csv-file.html"},{"title":"Load A JSON File","text":"<!-- Load D3 Library --> < script src = \"http://d3js.org/d3.v3.min.js\" charset = \"utf-8\" ></ script > <!-- Use D3 Library --> < script > // Create a variable with the url to the JSON file var url = \"https://gist.githubusercontent.com/d3byex/e5ce6526ba2208014379/raw/8fefb14cc18f0440dc00248f23cbf6aec80dcc13/walking_dead_s5.json\" ; // Load the json file d3 . json ( url , function ( error , data ) { // Output the first observation to the log console . log ( data [ 0 ]); }); </ script > // Create a variable with the url to the JSON file var url = \"https://gist.githubusercontent.com/d3byex/e5ce6526ba2208014379/raw/8fefb14cc18f0440dc00248f23cbf6aec80dcc13/walking_dead_s5.json\"; // Load the json file d3.json(url, function(error, data) { // Output the first observation to the log console.log(data[0]); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/load-a-json-file.html","loc":"http://chrisalbon.com/javascript/load-a-json-file.html"},{"title":"Manipulating Arrays","text":"< script > // Create some arrays var names = [ 'Steve' , 'Bob' , 'Jack' , 'Abe' , 'Sven' ] var ages = [ 32 , 12 , 52 , 69 , 93 , 23 , 94 ]; var moreAges = [ 32 , 50 , 29 , 3 ] // Pop out last element in array console . log ( 'ages.pop():' , ages . pop ()); // Remove the first element of the array console . log ( 'ages.shift():' , ages . shift ()); // Push in a new element at the end of the array console . log ( 'ages.push(32):' , ages . push ( 32 )); // Push in a new element at the start of the array console . log ( 'ages.unshift(23)' , ages . unshift ( 23 )); // Deleting element of the array delete ages [ 2 ]; // Concatenating two arrays console . log ( 'ages.concat(moreAges):' , ages . concat ( moreAges )); // Sort the array alphabetically console . log ( 'names.sort():' , names . sort ()); // Sort the array reverse alphabetically console . log ( 'names.reverse():' , names . reverse ()); // Sort ascending console . log ( 'ages.sort(function(a, b){return a - b}):' , ages . sort ( function ( a , b ){ return a - b })); // Sort decending console . log ( 'ages.sort(function(a, b){return b - a}):' , ages . sort ( function ( a , b ){ return b - a })); </ script > // Create some arrays var names = ['Steve', 'Bob', 'Jack', 'Abe', 'Sven'] var ages = [32,12,52,69,93,23,94]; var moreAges = [32,50,29,3] // Pop out last element in array console.log('ages.pop():', ages.pop()); // Remove the first element of the array console.log('ages.shift():', ages.shift()); // Push in a new element at the end of the array console.log('ages.push(32):', ages.push(32)); // Push in a new element at the start of the array console.log('ages.unshift(23)', ages.unshift(23)); // Deleting element of the array delete ages[2]; // Concatenating two arrays console.log('ages.concat(moreAges):', ages.concat(moreAges)); // Sort the array alphabetically console.log('names.sort():', names.sort()); // Sort the array reverse alphabetically console.log('names.reverse():', names.reverse()); // Sort ascending console.log('ages.sort(function(a, b){return a - b}):', ages.sort(function(a, b){return a - b})); // Sort decending console.log('ages.sort(function(a, b){return b - a}):', ages.sort(function(a, b){return b - a}));","tags":"Javascript","url":"http://chrisalbon.com/javascript/manipulating-arrays.html","loc":"http://chrisalbon.com/javascript/manipulating-arrays.html"},{"title":"Multiline Plot","text":"This code uses D3 and Dimple.js . <!-- Create an element for our chart --> < div id = \"chart\" style = \"height: 400px; width: 100%;\" ></ div > <!-- Load D3 --> < script src = \"https://d3js.org/d3.v4.min.js\" ></ script > <!-- Load Dimple --> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/dimple/2.3.0/dimple.latest.min.js\" ></ script > <!-- Create a dimble chart --> < script type = \"text/javascript\" > // Create a new svg variable var svg = dimple . newSvg ( \"#chart\" , \"100%\" , \"100%\" ); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3 . tsv ( url , function ( data ) { // Create a chart var myChart = new dimple . chart ( svg , data ); // Add an x-axis of time, grouped by Month var x = myChart . addCategoryAxis ( \"x\" , \"Month\" ); // Order the x-axis by date x . addOrderRule ( \"Date\" ); // Add a y-axis myChart . addMeasureAxis ( \"y\" , \"Unit Sales\" ); // Add the actual data, grouped by owner var s = myChart . addSeries ( 'Owner' , dimple . plot . line ); // Add some margins myChart . setMargins ( \"10%\" , \"10%\" , \"10%\" , \"20%\" ); // Draw the chart myChart . draw (); }); </ script > // Create a new svg variable var svg = dimple.newSvg(\"#chart\", \"100%\", \"100%\"); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3.tsv(url, function(data) { // Create a chart var myChart = new dimple.chart(svg, data); // Add an x-axis of time, grouped by Month var x = myChart.addCategoryAxis(\"x\", \"Month\"); // Order the x-axis by date x.addOrderRule(\"Date\"); // Add a y-axis myChart.addMeasureAxis(\"y\", \"Unit Sales\"); // Add the actual data, grouped by owner var s = myChart.addSeries('Owner', dimple.plot.line); // Add some margins myChart.setMargins(\"10%\", \"10%\", \"10%\", \"20%\"); // Draw the chart myChart.draw(); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/multiline-plot.html","loc":"http://chrisalbon.com/javascript/multiline-plot.html"},{"title":"Objects","text":"< script > // Create an object called army var army = { // With key value pair with a string name : '5th Army' , // And a nested object vehicles : { trucks : 4 , tanks : 6 , aircraft : 10 , helicpters : 12 , }, }; // View the number of trucks in the army console . log ( 'Number of trucks:' , army . vehicles . trucks ) </ script > // Create an object called army var army = { // With key value pair with a string name: '5th Army', // And a nested object vehicles: { trucks: 4, tanks: 6, aircraft: 10, helicpters: 12, }, }; // View the number of trucks in the army console.log('Number of trucks:', army.vehicles.trucks)","tags":"Javascript","url":"http://chrisalbon.com/javascript/objects.html","loc":"http://chrisalbon.com/javascript/objects.html"},{"title":"Proportional Stacked Bar Chart","text":"This code uses D3 and Dimple.js . <!-- Create an element for our chart --> < div id = \"chart\" style = \"height: 400px; width: 100%;\" ></ div > <!-- Load D3 --> < script src = \"https://d3js.org/d3.v4.min.js\" ></ script > <!-- Load Dimple --> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/dimple/2.3.0/dimple.latest.min.js\" ></ script > <!-- Create a dimble chart --> < script type = \"text/javascript\" > // Create a new svg variable var svg = dimple . newSvg ( \"#chart\" , \"100%\" , \"100%\" ); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3 . tsv ( url , function ( data ) { // Create a new chart var myChart = new dimple . chart ( svg , data ); // Add an x-axis that groups the data by month var x = myChart . addCategoryAxis ( \"x\" , \"Month\" ); // Order the x axis by date x . addOrderRule ( \"Date\" ); // Add a y-axis that is the percent of unit sales. myChart . addPctAxis ( \"y\" , \"Unit Sales\" ); // Add the data to the chart, grouped by \"Channel\" var avg = myChart . addSeries ( \"Channel\" , dimple . plot . bar ); // Calculate the average Unit Sales avg . aggregate = dimple . aggregateMethod . avg ; // Add some margins myChart . setMargins ( \"10%\" , \"10%\" , \"10%\" , \"20%\" ); // Draw the chart myChart . draw (); }); </ script > // Create a new svg variable var svg = dimple.newSvg(\"#chart\", \"100%\", \"100%\"); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3.tsv(url, function(data) { // Create a new chart var myChart = new dimple.chart(svg, data); // Add an x-axis that groups the data by month var x = myChart.addCategoryAxis(\"x\", \"Month\"); // Order the x axis by date x.addOrderRule(\"Date\"); // Add a y-axis that is the percent of unit sales. myChart.addPctAxis(\"y\", \"Unit Sales\"); // Add the data to the chart, grouped by \"Channel\" var avg = myChart.addSeries(\"Channel\", dimple.plot.bar); // Calculate the average Unit Sales avg.aggregate = dimple.aggregateMethod.avg; // Add some margins myChart.setMargins(\"10%\", \"10%\", \"10%\", \"20%\"); // Draw the chart myChart.draw(); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/proportional-stacked-bar-chart.html","loc":"http://chrisalbon.com/javascript/proportional-stacked-bar-chart.html"},{"title":"Replacing Strings","text":"< p id = \"output\" ></ p > < script > // Create a string var string = \"The army will attack at dawn! Go army!\" ; // Create new string that replaces ALL (i.e. globally) instances of 'army' with 'navy' var newString = string . replace ( /army/g , \"Navy\" ); // Insert the position inside the HTML element with ID=\"output\" document . getElementById ( \"output\" ). innerHTML = newString ; </ script > // Create a string var string = \"The army will attack at dawn! Go army!\"; // Create new string that replaces ALL (i.e. globally) instances of 'army' with 'navy' var newString = string.replace(/army/g, \"Navy\"); // Insert the position inside the HTML element with ID=\"output\" document.getElementById(\"output\").innerHTML = newString;","tags":"Javascript","url":"http://chrisalbon.com/javascript/replacing-strings.html","loc":"http://chrisalbon.com/javascript/replacing-strings.html"},{"title":"Scale Numeric Data To Pixels","text":"<!-- Load D3 Library --> < script src = \"http://d3js.org/d3.v3.min.js\" charset = \"utf-8\" ></ script > <!-- Use D3 Library --> < script > // Create a variable with the url to the data var url = \"https://gist.githubusercontent.com/d3byex/e5ce6526ba2208014379/raw/8fefb14cc18f0440dc00248f23cbf6aec80dcc13/walking_dead_s5.csv\" ; // Load csv data d3 . csv ( url , function ( error , data ) { // Create a function that converts USViewers to numeric var convertToNumeric = data . map ( function ( d ) { return { USViewers : + d . USViewers , }; }); // Convert viewership to numeric var viewership = convertToNumeric . map ( function ( d ) { return d . USViewers ; }); // Find the smallest viewership var minViewership = d3 . min ( viewership ); // Find the largest viewership var maxViewership = d3 . max ( viewership ); // Set the minimum bar height var minBarHeight = 100 // Set the maxiumum bar height var maxBarHeight = 400 ; // Create a variable that scales data to pixels var yScale = d3 . scale . linear () // Input min and max . domain ([ minViewership , maxViewership ]) // Output min and max . range ([ minBarHeight , maxBarHeight ]); // As an example, scale a certain viewership value into pixels console . log ( \"Input in viewership: \" + 15000000 , \"Output in pixels: \" + yScale ( 15000000 )); }); </ script > // Create a variable with the url to the data var url = \"https://gist.githubusercontent.com/d3byex/e5ce6526ba2208014379/raw/8fefb14cc18f0440dc00248f23cbf6aec80dcc13/walking_dead_s5.csv\"; // Load csv data d3.csv(url, function(error, data) { // Create a function that converts USViewers to numeric var convertToNumeric = data.map(function(d) { return { USViewers: +d.USViewers, }; }); // Convert viewership to numeric var viewership = convertToNumeric.map(function(d) { return d.USViewers; }); // Find the smallest viewership var minViewership = d3.min(viewership); // Find the largest viewership var maxViewership = d3.max(viewership); // Set the minimum bar height var minBarHeight = 100 // Set the maxiumum bar height var maxBarHeight = 400; // Create a variable that scales data to pixels var yScale = d3.scale .linear() // Input min and max .domain([minViewership, maxViewership]) // Output min and max .range([minBarHeight, maxBarHeight]); // As an example, scale a certain viewership value into pixels console.log(\"Input in viewership: \" + 15000000, \"Output in pixels: \" + yScale(15000000)); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/scale-numeric-data-to-pixels.html","loc":"http://chrisalbon.com/javascript/scale-numeric-data-to-pixels.html"},{"title":"Scatter Plot","text":"This code uses D3 and Dimple.js . <!-- Create an element for our chart --> < div id = \"chart\" style = \"height: 400px; width: 100%;\" ></ div > <!-- Load D3 --> < script src = \"https://d3js.org/d3.v4.min.js\" ></ script > <!-- Load Dimple --> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/dimple/2.3.0/dimple.latest.min.js\" ></ script > <!-- Create a dimble chart --> < script type = \"text/javascript\" > // Create a new svg variable var svg = dimple . newSvg ( \"#chart\" , \"100%\" , \"100%\" ); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3 . tsv ( url , function ( data ) { // Create a new chart var myChart = new dimple . chart ( svg , data ); // Add a x-axis myChart . addMeasureAxis ( \"x\" , \"Unit Sales\" ); // Add a y-axis myChart . addMeasureAxis ( \"y\" , \"Operating Profit\" ); // Add the data to the chart, grouped by SKU and Channel var avg = myChart . addSeries ([ \"SKU\" , \"Channel\" ], dimple . plot . bubble ); // Add a legend myChart . addLegend ( 5 , 5 , 360 , 20 , \"right\" ); // Add some margins myChart . setMargins ( \"10%\" , \"10%\" , \"10%\" , \"20%\" ); // Draw the chart myChart . draw (); }); </ script > // Create a new svg variable var svg = dimple.newSvg(\"#chart\", \"100%\", \"100%\"); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3.tsv(url, function(data) { // Create a new chart var myChart = new dimple.chart(svg, data); // Add a x-axis myChart.addMeasureAxis(\"x\", \"Unit Sales\"); // Add a y-axis myChart.addMeasureAxis(\"y\", \"Operating Profit\"); // Add the data to the chart, grouped by SKU and Channel var avg = myChart.addSeries([\"SKU\", \"Channel\"], dimple.plot.bubble); // Add a legend myChart.addLegend(5, 5, 360, 20, \"right\"); // Add some margins myChart.setMargins(\"10%\", \"10%\", \"10%\", \"20%\"); // Draw the chart myChart.draw(); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/scatter-plot.html","loc":"http://chrisalbon.com/javascript/scatter-plot.html"},{"title":"Searching Strings","text":"< p id = \"output\" ></ p > < script > // Create a string var string = \"The army will attack at dawn!\" ; // Return the index of `string` where locate occurs var position = string . search ( \"dawn\" ); // Insert the position inside the HTML element with ID=\"output\" document . getElementById ( \"output\" ). innerHTML = position ; </ script > // Create a string var string = \"The army will attack at dawn!\"; // Return the index of `string` where locate occurs var position = string.search(\"dawn\"); // Insert the position inside the HTML element with ID=\"output\" document.getElementById(\"output\").innerHTML = position;","tags":"Javascript","url":"http://chrisalbon.com/javascript/searching-strings.html","loc":"http://chrisalbon.com/javascript/searching-strings.html"},{"title":"Slicing Strings","text":"< p id = \"output\" ></ p > < script > // Create a string var string = \"The army will attack at dawn!\" ; // Create substring that is one from the end to five from the end var substring = string . slice ( - 5 , - 1 ); // Insert the position inside the HTML element with ID=\"output\" document . getElementById ( \"output\" ). innerHTML = substring ; </ script > // Create a string var string = \"The army will attack at dawn!\"; // Create substring that is one from the end to five from the end var substring = string.slice(-5, -1); // Insert the position inside the HTML element with ID=\"output\" document.getElementById(\"output\").innerHTML = substring;","tags":"Javascript","url":"http://chrisalbon.com/javascript/slicing-strings.html","loc":"http://chrisalbon.com/javascript/slicing-strings.html"},{"title":"Stacked Area Plots","text":"This code uses D3 and Dimple.js . <!-- Create an element for our chart --> < div id = \"chart\" style = \"height: 400px; width: 100%;\" ></ div > <!-- Load D3 --> < script src = \"https://d3js.org/d3.v4.min.js\" ></ script > <!-- Load Dimple --> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/dimple/2.3.0/dimple.latest.min.js\" ></ script > <!-- Create a dimble chart --> < script type = \"text/javascript\" > // Create a new svg variable var svg = dimple . newSvg ( \"#chart\" , \"100%\" , \"100%\" ); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3 . tsv ( url , function ( data ) { // Filter the data so we only see data where Owner = Aperture or Black Mesa data = dimple . filterData ( data , \"Owner\" , [ \"Aperture\" , \"Black Mesa\" ]) // Create a chart var myChart = new dimple . chart ( svg , data ); // Add an x-axis of time, grouped by Month var x = myChart . addCategoryAxis ( \"x\" , \"Month\" ); // Order the x-axis by date x . addOrderRule ( \"Date\" ); // Add a y-axis myChart . addMeasureAxis ( \"y\" , \"Unit Sales\" ); // Add the actual data, grouped by channel var s = myChart . addSeries ( \"Channel\" , dimple . plot . area ); // Add some margins myChart . setMargins ( \"10%\" , \"10%\" , \"10%\" , \"20%\" ); // Draw the chart myChart . draw (); }); </ script > // Create a new svg variable var svg = dimple.newSvg(\"#chart\", \"100%\", \"100%\"); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3.tsv(url, function(data) { // Filter the data so we only see data where Owner = Aperture or Black Mesa data = dimple.filterData(data, \"Owner\", [\"Aperture\", \"Black Mesa\"]) // Create a chart var myChart = new dimple.chart(svg, data); // Add an x-axis of time, grouped by Month var x = myChart.addCategoryAxis(\"x\", \"Month\"); // Order the x-axis by date x.addOrderRule(\"Date\"); // Add a y-axis myChart.addMeasureAxis(\"y\", \"Unit Sales\"); // Add the actual data, grouped by channel var s = myChart.addSeries(\"Channel\", dimple.plot.area); // Add some margins myChart.setMargins(\"10%\", \"10%\", \"10%\", \"20%\"); // Draw the chart myChart.draw(); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/stacked-area-plots.html","loc":"http://chrisalbon.com/javascript/stacked-area-plots.html"},{"title":"Stacked Bar Chart","text":"This code uses D3 and Dimple.js . <!-- Create an element for our chart --> < div id = \"chart\" style = \"height: 400px; width: 100%;\" ></ div > <!-- Load D3 --> < script src = \"https://d3js.org/d3.v4.min.js\" ></ script > <!-- Load Dimple --> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/dimple/2.3.0/dimple.latest.min.js\" ></ script > <!-- Create a dimble chart --> < script type = \"text/javascript\" > // Create a new svg variable var svg = dimple . newSvg ( \"#chart\" , \"100%\" , \"100%\" ); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3 . tsv ( url , function ( data ) { // Create a new chart var myChart = new dimple . chart ( svg , data ); // Add an x-axis that groups the data by month var x = myChart . addCategoryAxis ( \"x\" , \"Month\" ); // Order the x axis by date x . addOrderRule ( \"Date\" ); // Add a y-axis for the variable \"Unit Sales\" myChart . addMeasureAxis ( \"y\" , \"Unit Sales\" ); // Add the data to the chart, grouped by \"Channel\" var avg = myChart . addSeries ( \"Channel\" , dimple . plot . bar ); // Calculate the average Unit Sales avg . aggregate = dimple . aggregateMethod . avg ; // Add some margins myChart . setMargins ( \"10%\" , \"10%\" , \"10%\" , \"20%\" ); // Draw the chart myChart . draw (); }); </ script > // Create a new svg variable var svg = dimple.newSvg(\"#chart\", \"100%\", \"100%\"); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3.tsv(url, function(data) { // Create a new chart var myChart = new dimple.chart(svg, data); // Add an x-axis that groups the data by month var x = myChart.addCategoryAxis(\"x\", \"Month\"); // Order the x axis by date x.addOrderRule(\"Date\"); // Add a y-axis for the variable \"Unit Sales\" myChart.addMeasureAxis(\"y\", \"Unit Sales\"); // Add the data to the chart, grouped by \"Channel\" var avg = myChart.addSeries(\"Channel\", dimple.plot.bar); // Calculate the average Unit Sales avg.aggregate = dimple.aggregateMethod.avg; // Add some margins myChart.setMargins(\"10%\", \"10%\", \"10%\", \"20%\"); // Draw the chart myChart.draw(); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/stacked-bar-chart.html","loc":"http://chrisalbon.com/javascript/stacked-bar-chart.html"},{"title":"Stacked Step Area Plot","text":"This code uses D3 and Dimple.js . <!-- Create an element for our chart --> < div id = \"chart\" style = \"height: 400px; width: 100%;\" ></ div > <!-- Load D3 --> < script src = \"https://d3js.org/d3.v4.min.js\" ></ script > <!-- Load Dimple --> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/dimple/2.3.0/dimple.latest.min.js\" ></ script > <!-- Create a dimble chart --> < script type = \"text/javascript\" > // Create a new svg variable var svg = dimple . newSvg ( \"#chart\" , \"100%\" , \"100%\" ); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3 . tsv ( url , function ( data ) { // Create a chart var myChart = new dimple . chart ( svg , data ); // Add an x-axis of time, grouped by Month var x = myChart . addCategoryAxis ( \"x\" , \"Month\" ); // Order the x-axis by date x . addOrderRule ( \"Date\" ); // Add a y-axis myChart . addMeasureAxis ( \"y\" , \"Unit Sales\" ); // Add the actual data, grouped by owner var s = myChart . addSeries ( null , dimple . plot . area ); // Display as a step chart s . interpolation = \"step\" ; // Add some margins myChart . setMargins ( \"10%\" , \"10%\" , \"10%\" , \"20%\" ); // Draw the chart myChart . draw (); }); </ script > // Create a new svg variable var svg = dimple.newSvg(\"#chart\", \"100%\", \"100%\"); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3.tsv(url, function(data) { // Create a chart var myChart = new dimple.chart(svg, data); // Add an x-axis of time, grouped by Month var x = myChart.addCategoryAxis(\"x\", \"Month\"); // Order the x-axis by date x.addOrderRule(\"Date\"); // Add a y-axis myChart.addMeasureAxis(\"y\", \"Unit Sales\"); // Add the actual data, grouped by owner var s = myChart.addSeries(null, dimple.plot.area); // Display as a step chart s.interpolation = \"step\"; // Add some margins myChart.setMargins(\"10%\", \"10%\", \"10%\", \"20%\"); // Draw the chart myChart.draw(); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/stacked-step-area-plot.html","loc":"http://chrisalbon.com/javascript/stacked-step-area-plot.html"},{"title":"Stacked Step Area Plots","text":"This code uses D3 and Dimple.js . <!-- Create an element for our chart --> < div id = \"chart\" style = \"height: 400px; width: 100%;\" ></ div > <!-- Load D3 --> < script src = \"https://d3js.org/d3.v4.min.js\" ></ script > <!-- Load Dimple --> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/dimple/2.3.0/dimple.latest.min.js\" ></ script > <!-- Create a dimble chart --> < script type = \"text/javascript\" > // Create a new svg variable var svg = dimple . newSvg ( \"#chart\" , \"100%\" , \"100%\" ); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3 . tsv ( url , function ( data ) { // Filter the data so we only see data where Owner = Aperture or Black Mesa data = dimple . filterData ( data , \"Owner\" , [ \"Aperture\" , \"Black Mesa\" ]) // Create a chart var myChart = new dimple . chart ( svg , data ); // Add an x-axis of time, grouped by Month var x = myChart . addCategoryAxis ( \"x\" , \"Month\" ); // Order the x-axis by date x . addOrderRule ( \"Date\" ); // Add a y-axis myChart . addMeasureAxis ( \"y\" , \"Unit Sales\" ); // Add the actual data, grouped by owner var s = myChart . addSeries ( 'Owner' , dimple . plot . area ); // Display as a step chart s . interpolation = \"step\" ; // Add some margins myChart . setMargins ( \"10%\" , \"10%\" , \"10%\" , \"20%\" ); // Draw the chart myChart . draw (); }); </ script > // Create a new svg variable var svg = dimple.newSvg(\"#chart\", \"100%\", \"100%\"); // Create a url to the data var url = \"https://raw.githubusercontent.com/chrisalbon/learn_js/master/data/example_data.tsv\" // Load the data d3.tsv(url, function(data) { // Filter the data so we only see data where Owner = Aperture or Black Mesa data = dimple.filterData(data, \"Owner\", [\"Aperture\", \"Black Mesa\"]) // Create a chart var myChart = new dimple.chart(svg, data); // Add an x-axis of time, grouped by Month var x = myChart.addCategoryAxis(\"x\", \"Month\"); // Order the x-axis by date x.addOrderRule(\"Date\"); // Add a y-axis myChart.addMeasureAxis(\"y\", \"Unit Sales\"); // Add the actual data, grouped by owner var s = myChart.addSeries('Owner', dimple.plot.area); // Display as a step chart s.interpolation = \"step\"; // Add some margins myChart.setMargins(\"10%\", \"10%\", \"10%\", \"20%\"); // Draw the chart myChart.draw(); });","tags":"Javascript","url":"http://chrisalbon.com/javascript/stacked-step-area-plots.html","loc":"http://chrisalbon.com/javascript/stacked-step-area-plots.html"},{"title":"While Loops","text":"< script > // You start with 50 bitcoins var bitcoins = 50 ; // While bitcoins is more than 1 and less than 100 while ( bitcoins > 0 && bitcoins < 100 ) { // Loop over and over, each time subtracting 1 bitcoin bitcoins = bitcoins - 1 } // View the final number of bitcoins console . log ( 'Number of bitcoins:' , bitcoins ) </ script > // You start with 50 bitcoins var bitcoins = 50; // While bitcoins is more than 1 and less than 100 while (bitcoins > 0 && bitcoins < 100) { // Loop over and over, each time subtracting 1 bitcoin bitcoins = bitcoins - 1 } // View the final number of bitcoins console.log('Number of bitcoins:', bitcoins)","tags":"Javascript","url":"http://chrisalbon.com/javascript/while-loops.html","loc":"http://chrisalbon.com/javascript/while-loops.html"},{"title":"What I Learned Tracking My Time At Techstars","text":"In the fall of 2015, Popily , a data exploration company I cofounded with two friends was offered a slot in the 2016 class of Techstars Cloud . Like most people in tech, I had heard about Techstars, but in truth I barely knew anything specific, particularly about the day-to-day of the program. Was Techstars a permanent hackathon fueled by Soylent and Adderall? Was it three months of guest speakers and sponsored happy hours? I watched Techstars's promotional videos , but the only impression I could glean was that all the founders worked 36 hours per day while having ample spare time to ride bikes around downtown Boulder. I also found some posts about people's experiences, but overall I was in the dark. So, when we joined Techstars Cloud in November, I did what I was trained to do: gather data. For three months, from November 2nd, 2015 to January 31st, 2016, I tracked how I spent every 15 minutes of every day and categorized each into one of seven activities: Non-Technical Work: Email, writing, diagramming, project management, PivotalTracker , etc. Technical Work: Coding, designing, data analysis, etc. Discussion: Team meetings, speaking events, meeting with mentors or investors, Techstars happy hours, etc. Sleep Travel: Driving or flying (when I couldn't do any work) Exercise: Running (which basically never happened) Personal: Time with family, cooking, hobbies, reading, housework etc. The full data is available on Github , however in this post I used Popily.com to explore the data and understand how I spent my time during Techstars and offer a few lessons learned along the way. I hope you find it useful. Every Day At Techstars Cloud Lesson 1: Techstars Is For Going All-In If there was one description of my time at Techstars it was that I worked, a lot -- during evenings, lunches, and holidays; in offices, cars, and AirBnBs; alone, with my team, and while holding my daughter. The combination of the environment and the looming Demo Day made the work all-consuming. I was responsible for the product, so it is unsurprising that the largest number of my hours was spent on technical tasks. In truth, even non-technical tasks were almost always related to product development: UX testing, QAing, or PivotalTracker. My laser focus on the product was sometimes at odds with the myriad of guest speakers and mentor meetings that, while interesting and useful, could suck me in and stall development. As a company we started using two strategies to keep the product moving forward. First, most of the meetings and events were handled by my cofounders, which left me time to focus to a greater degree on the product. Second, when we had a product update or launch goal, I spent weeks away from the Techstars offices so I could get the most work done on the product as possible. On average, during Techstars I worked 91.6 hours per week. I worked the most hours during the first week of the program, where I averaged 17.4 hours of work per day. This number will be unsurprising to anyone who has going though Techstars. The first three weeks of Techstars are called Mentor Madness and can essentially be described as a full day of back to back 20 minute meetings with every fancy and impressive founder you can imagine. You walk into a room, give a five minute pitch to anyone from the CEO of a boutique ad agency to a founder of a technology giant and hear their take about you, your company, your product, your market, whatever. After 20 minutes you walk into the next room and repeat the entire process again. Total Hours Spent On Tasks Mentor Madness was a grueling experience for all of us, not only because it took up so much of our energy (it takes a lot of focus to be engaged after seven almost-back-to-back meetings), but more importantly it made us have to defend, explain, and face so many fundamental assumptions we implicitly and explicitly made about our company, product, and strategy. In one meeting a mentor would argue that the go-to-market strategy is flawed and 20 minutes later the next mentor is arguing that we need to change our company's name. Those weeks were brutal. However, it was also probably one of the most important few weeks of our company. Because at the end of all those meetings, our day would just begin; from the last meeting to late at night my cofounders and I would consider, discuss, and debate a hundred points that were brought in the day. Why did the mentor hate the pricing model? Was she right or just old-fashioned? Should we change our name? Who is our customer? All the meetings and all the challenging questions forced us to discuss things which might otherwise be assumed or left unsaid. For those first few weeks I would get up early, spend an hour emailing, discuss some point or another about strategy or product, take meetings with mentors, discuss more over lunch, take more meetings, discuss over dinner and into the evening, shower, sleep, and start the whole thing over again. Two days during Mentor Madness contained a massive 13 and 14 hours of discussions. Those conversations alone made Techstars worthwhile. Unsurprisingly, the week with the least work was Christmas when I was traveling with my family and would only be able to sneak in a few hours of work per day after everyone fell asleep. Lesson 2: The Start Of Techstars Is About Strategy, The End Is About Execution Our company was not alone is spending the first weeks of the program focusing on planning and strategy. I think most of the companies in our class spent the first few weeks either going back to the drawing board or mapping out a plan ahead. However, in December, the mid-point of the program there was a general shift from planning to execution. Looking at hours spent on between technical and non-technical tasks, Techstars could be divided into two periods, before Christmas and after Christmas. In the first half of the program it felt like I spent every moment I wasn't in meetings writing, updating, or managing user stories. We had a few contract developers and I agonized over the ordering of user stories in PivotalTracker as to maximize the value we would get from every hour of their time. However, during the second half of the problem the planning took a back seat to building. Hours Spent On Technical And Non-Technical Work During Techstars Between Christmas and our launch on January 19th was probably my happiest in the program, because it was a wonderful coding crunchtime. I would get up, select the next user story in the queue, complete it, QA, and repeat. It was -- frankly -- just fun. All the discussions around marketing, fundraising, or ten thousand other things were put aside (i.e. handled by my cofounders), leaving me free to build. This switch from planning to building is beautifully seen in the data: in the first half of the program I spent almost all my time on planning and strategy and in the second half I spent almost all my time building. While non-technical and technical work peaked around the beginning and the end of the program, meetings, networking, and discussions continued throughout. As I said previously, the Mentor Madness of the first three weeks took up a massive amount of time at the start of the program, but after those weeks my cofounders and I actively tried to give each other the space to get stuff done. Our primary tactic was to have regular short(ish) \"State Of The Union calls almost every day, leaving the major discussions to multi-day planning sessions every few weeks. These discussion can be easily seen as peaks in the chart below. This system might not work well for everyone, but it gave us the right balance of time to work out problems and time to get shit done. Hours Spent At Discussions, Meetings, or Networking During Techstars Did all those hours matter? Completely and absolutely. Over the course of the program the product went from a tricycle to a Harley Davidson. There is more to do, but the leaps and bounds made during Techstars has been incredible. Lesson 3: Sleep Is Important! Kinda. As soon as I started tracking my time, I knew the first question everyone was going to ask: \"how much did you sleep?\" and because of the power of data I can give you a real answer: 5.5 hours of sleep per night. I will admit I was pretty pleased when I saw that number because while everyone at Techstars works their asses off 4.5 to 6.5 hours of sleep was my normal amount prior to Techstars. That said, on those few nights I received far less sleep than I needed my productivity suffered the next day. Looking at the data below, it is also notable to see that the amount of sleep I got every night remained relatively stable throughout the program. The only two deviations are the two times I made the twelve hour drive from my house to the Techstars offices overnight and the moderate dip in sleep I got in early January when I was enjoying my late night coding sessions. Hours Of Sleep During Techstars Lesson 4: There Is No Work-Life Balance I would love to say there was great work-life balance, but in reality was not any sort of work-life balance. There was regular fun events (e.g. happy hours, runs, etc.) during the program, but that isn't work-life balance, that is fun work events. The truth is that all the benefits of Techstars, the rapid advance of our product, the boost in users, the improved strategy, and everything else came at a price -- that for three months you lived your work and everything else from family to kids to friends took a backseat. During Techstars my average daily \"free time\" (i.e. not working or sleeping) was 2.7 hours. That is 2.7 hours per day for everything, from Christmas mornings to birthday parties to doctors appointments to cooking dinner. I am not complaining. I like working, and I am in a place in my life that I can let work take over for a while, but make no mistake: it did take over. I'd argue that to really get value from Techstars, it probably has to take over. As a more concrete example to the point above, of the three major holidays that took place during Techstars Cloud two of them were just a regular work day for me. Hours Spent On Activities On Thanksgiving, Xmas, and NYE Final Thoughts On Techstars It has been incredibly valuable to every aspect of Popily , from product to strategy. The advice been useful, the connections have been valuable, and Demo Day (February 11th) will be awesome. However, at the end of the day none of that was why I enjoyed Techstars. The real reason is that for three months I worked with people I enjoy for long hours on hard problems -- and everything else took a back seat. That might not appeal to many people, but it appeals to me. In truth, not once during Techstars did I feel like I was \"working\". Rather, I was with my friends, trying to do something genuinely hard -- and I can't ask for more than that.","tags":"Blog","url":"http://chrisalbon.com/blog/what-i-learned-tracking-my-time-at-techstars.html","loc":"http://chrisalbon.com/blog/what-i-learned-tracking-my-time-at-techstars.html"}]}